package day20

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_replaceMonster(t *testing.T) {
	type args struct {
		image  string
		coords []int
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "replaces strings at specified coords",
			args: args{
				image:  "....................",
				coords: []int{0, 3, 4, 6, 7, 9},
			},
			want: "O..OO.OO.O..........",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, replaceMonster(tt.args.image, tt.args.coords))
		})
	}
}

func Test_flattenImage(t *testing.T) {
	type args struct {
		img []string
	}
	tests := []struct {
		name  string
		args  args
		want  string
		want1 int
	}{
		{
			name: "flattens image correctly",
			args: args{
				img: []string{
					".#.#..#.##...#.##..#####",
					"###....#.#....#..#......",
					"##.##.###.#.#..######...",
					"###.#####...#.#####.#..#",
					"##.#....#.##.####...#.##",
					"...########.#....#####.#",
					"....#..#...##..#.#.###..",
					".####...#..#.....#......",
					"#..#.##..#..###.#.##....",
					"#.####..#.####.#.#.###..",
					"###.#.#...#.######.#..##",
					"#.####....##..########.#",
					"##..##.#...#...#.#.#.#..",
					"...#..#..#.#.##..###.###",
					".#.#....#.##.#...###.##.",
					"###.#...#..#.##.######..",
					".#.#.###.##.##.#..#.##..",
					".####.###.#...###.#..#.#",
					"..#.#..#..#.#.#.####.###",
					"#..####...#.#.#.###.###.",
					"#####..#####...###....##",
					"#.##..#..#...#..####...#",
					".#.###..##..##..####.##.",
					"...###...##...#...#..###",
				},
			},
			want
			want1: 24,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, got1 := flattenImage(tt.args.img)
			assert.Equal(t, tt.want, got)
			assert.Equal(t, tt.want1, got1)
		})
	}
}

func Test_unflattenImage(t *testing.T) {
	type args struct {
		img        string
		linelength int
	}
	tests := []struct {
		name string
		args args
		want []string
	}{
		{
			name: "unflattens image",
			args: args{
				img
				linelength: 24,
			},
			want: []string{
				".#.#..#.##...#.##..#####",
				"###....#.#....#..#......",
				"##.##.###.#.#..######...",
				"###.#####...#.#####.#..#",
				"##.#....#.##.####...#.##",
				"...########.#....#####.#",
				"....#..#...##..#.#.###..",
				".####...#..#.....#......",
				"#..#.##..#..###.#.##....",
				"#.####..#.####.#.#.###..",
				"###.#.#...#.######.#..##",
				"#.####....##..########.#",
				"##..##.#...#...#.#.#.#..",
				"...#..#..#.#.##..###.###",
				".#.#....#.##.#...###.##.",
				"###.#...#..#.##.######..",
				".#.#.###.##.##.#..#.##..",
				".####.###.#...###.#..#.#",
				"..#.#..#..#.#.#.####.###",
				"#..####...#.#.#.###.###.",
				"#####..#####...###....##",
				"#.##..#..#...#..####...#",
				".#.###..##..##..####.##.",
				"...###...##...#...#..###",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, unflattenImage(tt.args.img, tt.args.linelength))
		})
	}
}
